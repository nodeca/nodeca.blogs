//- This template shows blog entries belonging to a single user.
//-  - shows tags for each entry
//-  - doesn't show author's nick and avatar

- var entryStatuses = '$$ JSON.stringify(N.models.blogs.BlogEntry.statuses) $$'

//- show many operations checkbox
- var many_ops_permitted = self.runtime.is_member;

- self.own_bookmarks = self.own_bookmarks || [];

each entry in self.entries
  - var user = self.users[entry.user] || { hid: 0 };

  .blog-entry(
    class=(entry.st === entryStatuses.DELETED) ? 'blog-entry__m-deleted' : ''
    class=(entry.st === entryStatuses.DELETED_HARD) ? 'blog-entry__m-deleted-hard' : ''
    class=(entry.st === entryStatuses.HB) ? 'blog-entry__m-hb' : ''
    class=(self.own_bookmarks.indexOf(entry._id) !== -1) ? 'blog-entry__m-bookmarked' : ''
    class=(self.ignored_users[entry.user]) ? 'blog-entry__m-ignored' : ''
    data-entry-hid=entry.hid
    data-entry-id=entry._id
    id='entry' + entry.hid
  )
    if many_ops_permitted
      label.blog-entry__select(title=self.t('multiselect_hint'))
        input.blog-entry__select-cb(
          type='checkbox'
        )

    header.blog-entry__meta
      .blog-entry__title
        a.blog-entry__link(href=self.link_to('blogs.entry', { user_hid: user.hid, entry_hid: entry.hid }))
          = entry.title

    .blog-entry__content
      .blog-entry__message.markup!= entry.html

    footer.blog-entry__controls
      .blog-entry__read-more
        a(href=self.link_to('blogs.entry', { user_hid: user.hid, entry_hid: entry.hid }))
          = self.t('read_more')

      ul.blog-entry__controls-blk
        li.blog-entry__control-item
          - var href = self.link_to('blogs.entry', { user_hid: user.hid, entry_hid: entry.hid, $anchor: 'comments' });
          a.blog-entry__action.blog-entry__comments(href=href)
            span.icon.icon-comment.icon-space-after
            = self.t('comments', entry.comments)

        if self.settings.can_report_abuse
          li.blog-entry__control-item
            button.btn.btn-sm.blog-entry__action.blog-entry__report(title=self.t('report')
              data-entry-id=entry._id
              data-on-click='blogs.blocks.blog_entry:report'
            )
              span.icon.icon-report

        if self.runtime.is_member
          li.blog-entry__control-item
            button.btn.btn-sm.blog-entry__action.blog-entry__bookmark-add(
              data-entry-id=entry._id
              data-on-click='blogs.blocks.blog_entry:bookmark'
              title=self.t('bookmark_add')
            )
              span.icon.icon-bookmark
              span.blog-entry__bookmarks-count(data-bm-count=entry.bookmarks)

            button.btn.btn-sm.blog-entry__action.blog-entry__bookmark-remove(
              data-entry-id=entry._id
              data-on-click='blogs.blocks.blog_entry:bookmark'
              data-remove='true'
              title=self.t('bookmark_remove')
            )
              span.icon.icon-bookmark
              span.blog-entry__bookmarks-count(data-bm-count=entry.bookmarks)

        li.blog-entry__control-item
          != self.timetag(entry.ts, 'relative')

        - var showDropdown = false
        - showDropdown = showDropdown || self.runtime.is_member
        - showDropdown = showDropdown || self.settings.can_see_ip

        if showDropdown
          //- no aria parts - visible to moderators only
          .blog-entry__control-item.blog-entry__mod-menu.dropdown.dropup
            button.btn.btn-square.btn-sm.blog-entry__action.dropdown-toggle(
              data-toggle='dropdown'
              role='button'
            )
            .dropdown-menu.dropdown-menu-right(role='menu')
              button.dropdown-item= self.t('add_infraction')

              if self.settings.can_see_ip
                button.dropdown-item(
                  data-entry-id=entry._id
                  data-on-click='blogs.blocks.blog_entry:show_ip'
                )= self.t('ip_info')

              button.dropdown-item= self.t('edit')
              button.blog-entry__delete.dropdown-item= self.t('delete')
              button.blog-entry__undelete.dropdown-item= self.t('undelete')

    if entry.tag_hids && entry.tag_hids.length
      footer.blog-entry__tags
        = self.t('tags')

        != self.partial('@blogs.blocks.tag_list', { tag_hids: entry.tag_hids })
