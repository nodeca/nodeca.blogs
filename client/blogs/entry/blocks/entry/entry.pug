- self.infractions = self.infractions || {};
- self.own_votes = self.own_votes || {};
- self.own_bookmarks = self.own_bookmarks || [];

- var entry = self.entry;
- var user = self.users[self.user_id];
- var entryStatuses = '$$ JSON.stringify(N.models.blogs.BlogEntry.statuses) $$'

.blog-entry.blogs-entry-page__entry(
  id='entry' + entry.hid
  class=(entry.st === entryStatuses.DELETED) ? 'blog-entry__m-deleted' : ''
  class=(entry.st === entryStatuses.DELETED_HARD) ? 'blog-entry__m-deleted-hard' : ''
  class=(self.own_bookmarks.indexOf(entry._id) !== -1) ? 'blog-entry__m-bookmarked' : ''
  class=(self.own_votes[entry._id] === -1) ? 'blog-entry__m-voted-down' : ''
  class=(self.own_votes[entry._id] === +1) ? 'blog-entry__m-voted-up' : ''
  data-user-hid=user.hid
  data-entry-hid=entry.hid
  data-entry-id=entry._id
)
  header.page-head.blog-entry__head
    .float-right
      != self.partial('@blogs.entry.blocks.toolbar_controls')

    h1.blog-entry__title.page-head__title(itemprop='name')
      span.blog-entry__title-text= entry.title

      if user && user._id === self.runtime.user_id
        a.blog-entry__edit.icon.icon-edit(
          href='#'
          title=self.t('edit')
          data-entry-hid=entry.hid
          data-on-click='blogs.entry:entry_edit'
        )

    .blog-entry__meta
      span.blog-entry__meta-item.blog-entry__author
        if user
          a.blog-entry__author-link._ucard-popover(
            href=self.link_to('users.member', { user_hid: user.hid })
            data-user-id=entry.user
            data-user-ref='blog_entry:'+user.hid+':'+entry.hid
          )
            img.blog-entry__avatar(alt=user.name)&attributes(self.avatar(user, 'sm'))
            = user.name
        else
          .blog-entry__avatar.av-anon

      if entry.del_by
        span.blog-entry__meta-item.blog-entry__del-by
          = self.t('del_by')
          = ' '
          - var delUser = self.users[entry.del_by] || {}

          a.blog-entry__del-by-user._ucard-popover(
            href=self.link_to('users.member', { user_hid: delUser.hid })
            data-user-id=entry.del_by
            data-user-ref='blog_entry:'+user.hid+':'+entry.hid
          )= delUser.name

          if entry.del_reason
            = ' '
            = self.t('del_reason', { text: entry.del_reason })

  .blog-entry__content
    .blog-entry__message.markup!= entry.html

    if entry.tail && entry.tail.length
      .blog-entry__tail.markup-tail
        != self.partial('@users.blocks.attachments', { message: entry })

  footer.blog-entry__controls
    ul.blog-entry__controls-blk

      li.blog-entry__control-item.blog-entry__ts
        != self.timetag(entry.ts, 'relative')

      li.blog-entry__control-item.blog-entry__votes
        - var votes = entry.votes || 0;
        button.btn.blog-entry__action(
          data-on-click='common.votes_popover'
          data-votes-popover-placement='right'
          data-votes-popover-for=entry._id
          title=self.t('vote_details')
          data-votes-count=(votes > 0 ? '+' : '') + votes
        )

      if self.runtime.is_member && self.runtime.user_id !== entry.user

        if self.settings.can_vote && (self.settings.votes_add_max_time === 0 || new Date(entry.ts).getTime() > Date.now() - self.settings.votes_add_max_time * 60 * 60 * 1000)
          li.blog-entry__control-item.blog-entry__vote-up
            button.btn.blog-entry__action(
              title=self.t('vote_up')
              data-on-click='blogs.entry:entry_vote'
              data-entry-hid=entry.hid
              data-value=self.own_votes[entry._id] === 1 ? '0' : '1'
            )
              span.icon.icon-vote-up

          li.blog-entry__control-item.blog-entry__vote-down
            button.btn.blog-entry__action(
              title=self.t('vote_down')
              data-on-click='blogs.entry:entry_vote'
              data-entry-hid=entry.hid
              data-value=self.own_votes[entry._id] === -1 ? '0' : '-1'
            )
              span.icon.icon-vote-down

      - var infraction = self.infractions[entry._id];
      if infraction
        li.blog-entry__control-item.blog-entry__infraction(
          class=infraction.points === 0 ? 'blog-entry__infraction-m-warning' : ''
        )
          a.btn.blog-entry__action(
            title=self.t('infraction_title', { points: infraction.points, date: self.date(infraction.ts, 'datetime') })
            href=self.link_to('users.member', { user_hid: user && user.hid }) + '#infraction' + infraction._id
          )
            span.icon.icon-infraction

      if self.settings.can_report_abuse
        li.blog-entry__control-item
          button.btn.blog-entry__action.blog-entry__report(title=self.t('report')
            data-entry-id=entry._id
            data-on-click='blogs.blocks.blog_entry:report'
          )
            span.icon.icon-report

      if self.runtime.is_member
        li.blog-entry__control-item.blog-entry__bookmark
          button.btn.blog-entry__action.blog-entry__bookmark-add(
            data-entry-hid=entry.hid
            data-on-click='blogs.blocks.blog_entry:bookmark'
            title=self.t('bookmark_add')
          )
            span.icon.icon-bookmark
            span.blog-entry__bookmarks-count(data-bm-count=entry.bookmarks)

          button.btn.blog-entry__action.blog-entry__bookmark-remove(
            data-entry-hid=entry.hid
            data-on-click='blogs.blocks.blog_entry:bookmark'
            data-remove='true'
            title=self.t('bookmark_remove')
          )
            span.icon.icon-bookmark
            span.blog-entry__bookmarks-count(data-bm-count=entry.bookmarks)

      if entry.edit_count
        li.blog-entry__control-item.blog-entry__history
          button.btn.blog-entry__action(
            title=self.t('last_edited', { date: self.date(entry.last_edit_ts, 'datetime') })
            data-on-click='blogs.blocks.blog_entry:history'
            data-entry-id=entry._id
          )
            span.icon.icon-history.icon-space-after= entry.edit_count

      li.blog-entry__control-item.blog-entry__views
        span.icon.icon-views.icon-space-after(
          title=self.t('views')
        )
          = entry.views

  != self.partial('@blogs.blocks.tag_list', { tags: self.entry_tags })
