// Show edit history
//

'use strict';


const _  = require('lodash');


module.exports = function (N, apiPath) {

  N.validate(apiPath, {
    entry_id: { format: 'mongo', required: true }
  });


  // Check permissions
  //
  N.wire.before(apiPath, async function check_permissions(env) {
    let can_see_history = await env.extras.settings.fetch('can_see_history');

    if (!can_see_history) throw N.io.FORBIDDEN;
  });


  // Fetch entry
  //
  N.wire.before(apiPath, async function fetch_entry(env) {
    env.data.entry = await N.models.blogs.BlogEntry
                               .findById(env.params.entry_id)
                               .lean(true);

    if (!env.data.entry) throw N.io.NOT_FOUND;
  });


  // Check if user can see this entry
  //
  N.wire.before(apiPath, async function check_access(env) {
    let access_env = { params: {
      entries: env.data.entry,
      user_info: env.user_info
    } };

    await N.wire.emit('internal:blogs.access.entry', access_env);

    if (!access_env.data.access_read) throw N.io.NOT_FOUND;
  });


  // Using different sanitizer here,
  // because we need to expose editable fields (md) and don't need
  // autogenerated ones (bookmarks, views, html)
  //
  function sanitize_entry(entry) {
    // we can always hide HB status, because it doesn't affect client diffs
    if (entry.st === N.models.blogs.BlogEntry.statuses.HB) {
      entry = Object.assign({}, entry);
      entry.st = entry.ste;
      delete entry.ste;
    }

    if (entry.prev_st && entry.prev_st.st === N.models.blogs.BlogEntry.statuses.HB) {
      entry.prev_st = Object.assign({}, entry.prev_st);
      entry.prev_st.st = entry.prev_st.ste;
      delete entry.prev_st.ste;
    }

    return _.pick(entry, [
      'title',
      'md',
      'st',
      'ste',
      'tags',
      'del_reason',
      'del_by',
      'prev_st'
    ]);
  }


  // Fetch and return entry edit history
  //
  N.wire.on(apiPath, async function get_entry_history(env) {
    let history = await N.models.blogs.BlogEntryHistory.find()
                            .where('entry').equals(env.data.entry._id)
                            .sort('_id')
                            .lean(true);

    let history_meta = [ {
      user: env.data.entry.user,
      ts:   env.data.entry.ts,
      role: N.models.blogs.BlogEntryHistory.roles.USER
    } ].concat(
      _.map(history, i => ({ user: i.user, ts: i.ts, role: i.role }))
    );

    let history_entries = _.map(history, 'entry_data')
                           .concat([ env.data.entry ])
                           .map(sanitize_entry);

    env.res.history = _.zip(history_meta, history_entries)
                       .map(([ meta, entry ]) => ({ meta, entry }));

    env.data.users = (env.data.users || []).concat(_.map(env.res.history, 'meta.user'));
  });
};
